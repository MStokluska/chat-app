{"version":3,"sources":["components/AnimatedSwitch.tsx","graphql/types.tsx","graphql/fragments/message.fragment.ts","graphql/fragments/chat.fragment.ts","graphql/fragments/messagesResult.fragment.ts","graphql/fragments/fullChat.fragment.ts","graphql/fragments/user.fragment.ts","graphql/queries/chats.query.ts","services/cache.service.ts","services/auth.service.tsx","components/AuthScreen/form-components.ts","components/AuthScreen/SignInForm.tsx","components/AuthScreen/SignUpForm.tsx","components/AuthScreen/index.tsx","components/ChatRoomScreen/ChatNavbar.tsx","components/ChatRoomScreen/MessageInput.tsx","hooks/use-infinite-scroll.ts","components/ChatRoomScreen/MessagesList.tsx","hooks/use-adjusted-scroll.ts","components/ChatRoomScreen/index.tsx","components/ChatsListScreen/ChatsNavbar.tsx","components/ChatsListScreen/ChatsList.tsx","components/UsersList.tsx","components/ChatsListScreen/AddChatButton.tsx","components/ChatsListScreen/index.tsx","components/ChatCreationScreen/ChatCreationNavbar.tsx","components/ChatCreationScreen/index.tsx","App.tsx","client.ts","serviceWorker.ts","index.tsx"],"names":["SwitchComponent","AnimatedSwitch","glide","val","spring","stiffness","damping","mapStyles","styles","transform","concat","offset","MyAnimatedSwitch","styled","attrs","atEnter","atLeave","atActive","_templateObject","MessageFragmentDoc","gql","types_templateObject","ChatFragmentDoc","_templateObject2","MessagesResultFragmentDoc","_templateObject3","FullChatFragmentDoc","_templateObject4","UserFragmentDoc","_templateObject5","AddChatDocument","_templateObject6","RemoveChatDocument","_templateObject7","GetChatDocument","_templateObject8","AddMessageDocument","_templateObject9","UsersListDocument","_templateObject10","ChatsDocument","_templateObject11","MeDocument","_templateObject12","ChatAddedDocument","_templateObject13","ChatRemovedDocument","_templateObject14","MessageAddedDocument","_templateObject15","SignInDocument","_templateObject16","SignUpDocument","_templateObject17","message_fragment_templateObject","chat_fragment_templateObject","message","messagesResult_fragment_templateObject","fullChat_fragment_templateObject","chat","messagesResult","user_fragment_templateObject","chats_query_templateObject","fragments","useCacheService","baseOptions","onSubscriptionData","_ref","client","data","subscriptionData","writeMessage","messageAdded","ReactApolloHooks","useChatAddedSubscription","_ref2","writeChat","chatAdded","useChatRemovedSubscription","_ref3","eraseChat","chatRemoved","fullChat","chatIdFromStore","defaultDataIdFromObject","readFragment","id","fragment","fragmentName","e","messages","some","m","push","lastMessage","writeFragment","readQuery","query","queries","chats","undefined","chatIndex","findIndex","c","chatWhereAdded","splice","unshift","writeQuery","chatId","chatType","__typename","chatIdFromObject","MyContext","React","createContext","withAuth","Component","props","isSignedIn","history","location","pathname","react_default","a","createElement","react_router","to","signOut","useSignOut","_useMeQuery","error","loading","me","Provider","value","useSignIn","useSignUp","useApolloClient","useCallback","document","cookie","Date","clearStore","test","SignForm","div","form_components_templateObject","ActualForm","form","form_components_templateObject2","Section","form_components_templateObject3","Legend","legend","form_components_templateObject4","TextField","label","form_components_templateObject5","input","form_components_templateObject6","MaterialTextField","form_components_templateObject7","Button","MaterialButton","form_components_templateObject8","ErrorMessage","form_components_templateObject9","SignInForm","_useState","useState","_useState2","Object","slicedToArray","username","setUsername","_useState3","_useState4","password","setPassword","_useState5","_useState6","setError","_useSignIn","signIn","onUsernameChange","target","onPasswordChange","maySignIn","handleSignIn","variables","then","replace","catch","style","width","form_components_TextField","data-testid","onChange","margin","placeholder","type","form_components_Button","color","variant","disabled","onClick","SignUpForm","name","setName","_useState7","_useState8","passwordConfirm","setPasswordConfirm","_useState9","_useState10","_useSignUp","signUp","updateName","updateUsername","updatePassword","_ref4","updatePasswordConfirm","_ref5","maySignUp","handleSignUp","float","paddingRight","autoComplete","paddingLeft","Container","AuthScreen_templateObject","Intro","AuthScreen_templateObject2","Icon","img","AuthScreen_templateObject3","Title","h2","AuthScreen_templateObject4","Alternative","AuthScreen_templateObject5","AuthScreen","alternative","useMemo","className","src","exact","path","component","Toolbar","ChatNavbar_templateObject","BackButton","ChatNavbar_templateObject2","Rest","ChatNavbar_templateObject3","Picture","ChatNavbar_templateObject4","Name","ChatNavbar_templateObject5","DeleteButton","ChatNavbar_templateObject6","ChatNavbar","ChatNavbar_templateObject7","_useRemoveChatMutatio","update","removeChat","handleRemoveChat","navBack","ChatNavbar_Container","ArrowBack_default","picture","Fragment","Delete_default","MessageInput_templateObject","ActualInput","MessageInput_templateObject2","SendButton","MessageInput_templateObject3","MessageInput","onSendMessage","setMessage","submitMessage","MessageInput_Container","onKeyPress","charCode","Send_default","useInfiniteScroll","ref","hasMore","onLoadMore","isFetching","setIsFetching","handleScroll","current","scrollTop","useEffect","elem","addEventListener","removeEventListener","stopFetching","MessagesList_templateObject","LoadingMore","MessagesList_templateObject2","MessageItem","MessagesList_templateObject3","isMine","css","MessagesList_templateObject4","MessagesList_templateObject5","Contents","MessagesList_templateObject6","Timestamp","MessagesList_templateObject7","MessagesList","loadMore","selfRef","useRef","_useInfiniteScroll","_useInfiniteScroll2","fetching","adjustScroll","previousScroll","setPreviousScroll","scrollToBottom","node","ReactDOM","height","clientHeight","scrollHeight","top","useAdjustedScroll","length","MessagesList_Container","map","key","content","format","createdAt","ChatRoomScreen_templateObject","PaginationContext","ChatRoomScreen_templateObject2","ChatRoomScreen_templateObject3","after","limit","setAfter","reset","usePagination","pagination","useContext","ChatPaginationProvider","children","ChatRoom","_usePagination2","_useGetChatQuery","fetchMore","_useAddMessageMutatio","useAddMessageMutation","addMessage","optimisticResponse","Math","random","toString","substr","updateQuery","prev","fetchMoreResult","toConsumableArray","objectSpread","ChatRoomScreen_Container","ChatRoomScreen_ChatNavbar","ChatRoomScreen_MessagesList","cursor","ChatRoomScreen_MessageInput","ChatRoomScreen","ChatRoomScreen_ChatPaginationProvider","ChatRoomScreen_ChatRoom","ChatsNavbar_templateObject","ChatsNavbar_templateObject2","LogoutButton","ChatsNavbar_templateObject3","ChatsNavbar","handleSignOut","ChatsNavbar_Container","ChatsNavbar_Title","PowerSettingsNew_default","ChatsList_templateObject","StyledList","List","ChatsList_templateObject2","StyledListItem","ListItem","ChatsList_templateObject3","ChatPicture","ChatsList_templateObject4","ChatInfo","ChatsList_templateObject5","ChatName","ChatsList_templateObject6","MessageContent","ChatsList_templateObject7","MessageDate","ChatsList_templateObject8","ChatsList","navToChat","prefetchChat","_usePagination","useGetChatPrefetch","ChatsList_Container","button","bind","onMouseEnter","alt","ActualList","MaterialList","UsersList_templateObject","UserItem","MaterialItem","UsersList_templateObject2","ProfilePicture","UsersList_templateObject3","UsersList_templateObject4","UsersList","UsersList_templateObject5","_ref$onUserPick","onUserPick","user","_useUsersListQuery","loadingUsers","users","UsersList_Name","AddChatButton_templateObject","AddChatButton","prefetchUsers","useUsersPrefetch","AddChatButton_Container","Chat_default","ChatsListScreen_templateObject","ChatsListScreen","ChatsListScreen_Container","ChatsListScreen_ChatsNavbar","ChatsListScreen_ChatsList","ChatsListScreen_AddChatButton","ChatCreationNavbar_templateObject","ChatCreationNavbar_templateObject2","ChatCreationNavbar_templateObject3","ChatCreationNavbar","ChatCreationNavbar_Container","ChatCreationNavbar_BackButton","ChatCreationNavbar_Title","ChatCreationScreen_templateObject","ChatCreationScreen_templateObject2","ChatCreationScreen_templateObject3","ChatCreationScreen","_useAddChatMutation","addChat","recipientId","ChatCreationScreen_ChatCreationNavbar","components_UsersList","redirectToChats","App","react_router_dom","match","components_ChatRoomScreen","params","render","httpUri","process","wsUri","httpLink","HttpLink","uri","credentials","wsLink","WebSocketLink","options","reconnect","terminatingLink","split","_getMainDefinition","getMainDefinition","kind","operation","link","ApolloLink","from","inMemoryCache","InMemoryCache","src_client","ApolloClient","cache","Boolean","window","hostname","theme","createMuiTheme","palette","primary","main","secondary","MuiThemeProvider","ApolloContext","src_App","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.557ef859.chunk.js","sourcesContent":["import { Switch } from 'react-router-dom';\nimport { AnimatedSwitch, spring } from 'react-router-transition';\nimport styled from 'styled-components';\n\n// A workaround to make test pass\nconst SwitchComponent =\n  process.env.NODE_ENV === 'test' ? Switch : AnimatedSwitch;\n\nconst glide = (val: number) =>\n  spring(val, {\n    stiffness: 174,\n    damping: 24,\n  });\n\nconst mapStyles = (styles: any) => ({\n  transform: `translateX(${styles.offset}%)`,\n});\n\nconst MyAnimatedSwitch = styled(SwitchComponent).attrs(() => ({\n  atEnter: { offset: 100 },\n  atLeave: { offset: glide(-100) },\n  atActive: { offset: glide(0) },\n  mapStyles,\n}))`\n  position: relative;\n  overflow: hidden;\n  height: 100vh;\n  width: 100vw;\n\n  > div {\n    position: absolute;\n    overflow: hidden;\n    height: 100vh;\n    width: 100vw;\n  }\n`;\n\nexport default MyAnimatedSwitch;\n","/* eslint-disable */\nimport gql from 'graphql-tag';\nimport * as ReactApollo from 'react-apollo';\nimport * as ReactApolloHooks from 'react-apollo-hooks';\nexport type Maybe<T> = T | null;\n/** All built-in and custom scalars, mapped to their actual values */\nexport type Scalars = {\n  ID: string;\n  String: string;\n  Boolean: boolean;\n  Int: number;\n  Float: number;\n  DateTime: any;\n};\n\nexport type Chat = {\n  __typename?: 'Chat';\n  id: Scalars['ID'];\n  name?: Maybe<Scalars['String']>;\n  picture?: Maybe<Scalars['String']>;\n  lastMessage?: Maybe<Message>;\n  messages: MessagesResult;\n  participants: Array<User>;\n};\n\nexport type ChatMessagesArgs = {\n  limit: Scalars['Int'];\n  after?: Maybe<Scalars['Float']>;\n};\n\nexport type Message = {\n  __typename?: 'Message';\n  id: Scalars['ID'];\n  content: Scalars['String'];\n  createdAt: Scalars['DateTime'];\n  chat?: Maybe<Chat>;\n  sender?: Maybe<User>;\n  recipient?: Maybe<User>;\n  isMine: Scalars['Boolean'];\n};\n\nexport type MessagesResult = {\n  __typename?: 'MessagesResult';\n  cursor?: Maybe<Scalars['Float']>;\n  hasMore: Scalars['Boolean'];\n  messages: Array<Message>;\n};\n\nexport type Mutation = {\n  __typename?: 'Mutation';\n  addMessage?: Maybe<Message>;\n  addChat?: Maybe<Chat>;\n  removeChat?: Maybe<Scalars['ID']>;\n  _dummy?: Maybe<Scalars['Boolean']>;\n  signIn?: Maybe<User>;\n  signUp?: Maybe<User>;\n};\n\nexport type MutationAddMessageArgs = {\n  chatId: Scalars['ID'];\n  content: Scalars['String'];\n};\n\nexport type MutationAddChatArgs = {\n  recipientId: Scalars['ID'];\n};\n\nexport type MutationRemoveChatArgs = {\n  chatId: Scalars['ID'];\n};\n\nexport type MutationSignInArgs = {\n  username: Scalars['String'];\n  password: Scalars['String'];\n};\n\nexport type MutationSignUpArgs = {\n  name: Scalars['String'];\n  username: Scalars['String'];\n  password: Scalars['String'];\n  passwordConfirm: Scalars['String'];\n};\n\nexport type Query = {\n  __typename?: 'Query';\n  chats: Array<Chat>;\n  chat?: Maybe<Chat>;\n  _dummy?: Maybe<Scalars['Boolean']>;\n  me?: Maybe<User>;\n  users: Array<User>;\n};\n\nexport type QueryChatArgs = {\n  chatId: Scalars['ID'];\n};\n\nexport type Subscription = {\n  __typename?: 'Subscription';\n  messageAdded: Message;\n  chatAdded: Chat;\n  chatRemoved: Scalars['ID'];\n  _dummy?: Maybe<Scalars['Boolean']>;\n};\n\nexport type User = {\n  __typename?: 'User';\n  id: Scalars['ID'];\n  name: Scalars['String'];\n  picture?: Maybe<Scalars['String']>;\n};\nexport type AddChatMutationVariables = {\n  recipientId: Scalars['ID'];\n};\n\nexport type AddChatMutation = { __typename?: 'Mutation' } & {\n  addChat: Maybe<{ __typename?: 'Chat' } & ChatFragment>;\n};\n\nexport type RemoveChatMutationVariables = {\n  chatId: Scalars['ID'];\n};\n\nexport type RemoveChatMutation = { __typename?: 'Mutation' } & Pick<\n  Mutation,\n  'removeChat'\n>;\n\nexport type GetChatQueryVariables = {\n  chatId: Scalars['ID'];\n  limit: Scalars['Int'];\n  after?: Maybe<Scalars['Float']>;\n};\n\nexport type GetChatQuery = { __typename?: 'Query' } & {\n  chat: Maybe<{ __typename?: 'Chat' } & FullChatFragment>;\n};\n\nexport type AddMessageMutationVariables = {\n  chatId: Scalars['ID'];\n  content: Scalars['String'];\n};\n\nexport type AddMessageMutation = { __typename?: 'Mutation' } & {\n  addMessage: Maybe<{ __typename?: 'Message' } & MessageFragment>;\n};\n\nexport type UsersListQueryVariables = {};\n\nexport type UsersListQuery = { __typename?: 'Query' } & {\n  users: Array<{ __typename?: 'User' } & UserFragment>;\n};\n\nexport type ChatFragment = { __typename?: 'Chat' } & Pick<\n  Chat,\n  'id' | 'name' | 'picture'\n> & { lastMessage: Maybe<{ __typename?: 'Message' } & MessageFragment> };\n\nexport type FullChatFragment = { __typename?: 'Chat' } & {\n  messages: { __typename?: 'MessagesResult' } & MessagesResultFragment;\n} & ChatFragment;\n\nexport type MessageFragment = { __typename?: 'Message' } & Pick<\n  Message,\n  'id' | 'createdAt' | 'content' | 'isMine'\n> & { chat: Maybe<{ __typename?: 'Chat' } & Pick<Chat, 'id'>> };\n\nexport type MessagesResultFragment = { __typename?: 'MessagesResult' } & Pick<\n  MessagesResult,\n  'cursor' | 'hasMore'\n> & { messages: Array<{ __typename?: 'Message' } & MessageFragment> };\n\nexport type UserFragment = { __typename?: 'User' } & Pick<\n  User,\n  'id' | 'name' | 'picture'\n>;\n\nexport type ChatsQueryVariables = {};\n\nexport type ChatsQuery = { __typename?: 'Query' } & {\n  chats: Array<{ __typename?: 'Chat' } & ChatFragment>;\n};\n\nexport type MeQueryVariables = {};\n\nexport type MeQuery = { __typename?: 'Query' } & {\n  me: Maybe<{ __typename?: 'User' } & UserFragment>;\n};\n\nexport type ChatAddedSubscriptionVariables = {};\n\nexport type ChatAddedSubscription = { __typename?: 'Subscription' } & {\n  chatAdded: { __typename?: 'Chat' } & ChatFragment;\n};\n\nexport type ChatRemovedSubscriptionVariables = {};\n\nexport type ChatRemovedSubscription = { __typename?: 'Subscription' } & Pick<\n  Subscription,\n  'chatRemoved'\n>;\n\nexport type MessageAddedSubscriptionVariables = {};\n\nexport type MessageAddedSubscription = { __typename?: 'Subscription' } & {\n  messageAdded: { __typename?: 'Message' } & MessageFragment;\n};\n\nexport type SignInMutationVariables = {\n  username: Scalars['String'];\n  password: Scalars['String'];\n};\n\nexport type SignInMutation = { __typename?: 'Mutation' } & {\n  signIn: Maybe<{ __typename?: 'User' } & Pick<User, 'id'>>;\n};\n\nexport type SignUpMutationVariables = {\n  name: Scalars['String'];\n  username: Scalars['String'];\n  password: Scalars['String'];\n  passwordConfirm: Scalars['String'];\n};\n\nexport type SignUpMutation = { __typename?: 'Mutation' } & {\n  signUp: Maybe<{ __typename?: 'User' } & Pick<User, 'id'>>;\n};\nexport const MessageFragmentDoc = gql`\n  fragment Message on Message {\n    id\n    createdAt\n    content\n    isMine\n    chat {\n      id\n    }\n  }\n`;\nexport const ChatFragmentDoc = gql`\n  fragment Chat on Chat {\n    id\n    name\n    picture\n    lastMessage {\n      ...Message\n    }\n  }\n  ${MessageFragmentDoc}\n`;\nexport const MessagesResultFragmentDoc = gql`\n  fragment MessagesResult on MessagesResult {\n    cursor\n    hasMore\n    messages {\n      ...Message\n    }\n  }\n  ${MessageFragmentDoc}\n`;\nexport const FullChatFragmentDoc = gql`\n  fragment FullChat on Chat {\n    ...Chat\n    messages(limit: $limit, after: $after) @connection(key: \"messages\") {\n      ...MessagesResult\n    }\n  }\n  ${ChatFragmentDoc}\n  ${MessagesResultFragmentDoc}\n`;\nexport const UserFragmentDoc = gql`\n  fragment User on User {\n    id\n    name\n    picture\n  }\n`;\nexport const AddChatDocument = gql`\n  mutation AddChat($recipientId: ID!) {\n    addChat(recipientId: $recipientId) {\n      ...Chat\n    }\n  }\n  ${ChatFragmentDoc}\n`;\nexport type AddChatMutationFn = ReactApollo.MutationFn<\n  AddChatMutation,\n  AddChatMutationVariables\n>;\n\nexport function useAddChatMutation(\n  baseOptions?: ReactApolloHooks.MutationHookOptions<\n    AddChatMutation,\n    AddChatMutationVariables\n  >\n) {\n  return ReactApolloHooks.useMutation<\n    AddChatMutation,\n    AddChatMutationVariables\n  >(AddChatDocument, baseOptions);\n}\nexport type AddChatMutationHookResult = ReturnType<typeof useAddChatMutation>;\nexport const RemoveChatDocument = gql`\n  mutation RemoveChat($chatId: ID!) {\n    removeChat(chatId: $chatId)\n  }\n`;\nexport type RemoveChatMutationFn = ReactApollo.MutationFn<\n  RemoveChatMutation,\n  RemoveChatMutationVariables\n>;\n\nexport function useRemoveChatMutation(\n  baseOptions?: ReactApolloHooks.MutationHookOptions<\n    RemoveChatMutation,\n    RemoveChatMutationVariables\n  >\n) {\n  return ReactApolloHooks.useMutation<\n    RemoveChatMutation,\n    RemoveChatMutationVariables\n  >(RemoveChatDocument, baseOptions);\n}\nexport type RemoveChatMutationHookResult = ReturnType<\n  typeof useRemoveChatMutation\n>;\nexport const GetChatDocument = gql`\n  query GetChat($chatId: ID!, $limit: Int!, $after: Float) {\n    chat(chatId: $chatId) {\n      ...FullChat\n    }\n  }\n  ${FullChatFragmentDoc}\n`;\n\nexport function useGetChatQuery(\n  baseOptions?: ReactApolloHooks.QueryHookOptions<GetChatQueryVariables>\n) {\n  return ReactApolloHooks.useQuery<GetChatQuery, GetChatQueryVariables>(\n    GetChatDocument,\n    baseOptions\n  );\n}\nexport type GetChatQueryHookResult = ReturnType<typeof useGetChatQuery>;\nexport const AddMessageDocument = gql`\n  mutation AddMessage($chatId: ID!, $content: String!) {\n    addMessage(chatId: $chatId, content: $content) {\n      ...Message\n    }\n  }\n  ${MessageFragmentDoc}\n`;\nexport type AddMessageMutationFn = ReactApollo.MutationFn<\n  AddMessageMutation,\n  AddMessageMutationVariables\n>;\n\nexport function useAddMessageMutation(\n  baseOptions?: ReactApolloHooks.MutationHookOptions<\n    AddMessageMutation,\n    AddMessageMutationVariables\n  >\n) {\n  return ReactApolloHooks.useMutation<\n    AddMessageMutation,\n    AddMessageMutationVariables\n  >(AddMessageDocument, baseOptions);\n}\nexport type AddMessageMutationHookResult = ReturnType<\n  typeof useAddMessageMutation\n>;\nexport const UsersListDocument = gql`\n  query UsersList {\n    users {\n      ...User\n    }\n  }\n  ${UserFragmentDoc}\n`;\n\nexport function useUsersListQuery(\n  baseOptions?: ReactApolloHooks.QueryHookOptions<UsersListQueryVariables>\n) {\n  return ReactApolloHooks.useQuery<UsersListQuery, UsersListQueryVariables>(\n    UsersListDocument,\n    baseOptions\n  );\n}\nexport type UsersListQueryHookResult = ReturnType<typeof useUsersListQuery>;\nexport const ChatsDocument = gql`\n  query Chats {\n    chats {\n      ...Chat\n    }\n  }\n  ${ChatFragmentDoc}\n`;\n\nexport function useChatsQuery(\n  baseOptions?: ReactApolloHooks.QueryHookOptions<ChatsQueryVariables>\n) {\n  return ReactApolloHooks.useQuery<ChatsQuery, ChatsQueryVariables>(\n    ChatsDocument,\n    baseOptions\n  );\n}\nexport type ChatsQueryHookResult = ReturnType<typeof useChatsQuery>;\nexport const MeDocument = gql`\n  query Me {\n    me {\n      ...User\n    }\n  }\n  ${UserFragmentDoc}\n`;\n\nexport function useMeQuery(\n  baseOptions?: ReactApolloHooks.QueryHookOptions<MeQueryVariables>\n) {\n  return ReactApolloHooks.useQuery<MeQuery, MeQueryVariables>(\n    MeDocument,\n    baseOptions\n  );\n}\nexport type MeQueryHookResult = ReturnType<typeof useMeQuery>;\nexport const ChatAddedDocument = gql`\n  subscription ChatAdded {\n    chatAdded {\n      ...Chat\n    }\n  }\n  ${ChatFragmentDoc}\n`;\n\nexport function useChatAddedSubscription(\n  baseOptions?: ReactApolloHooks.SubscriptionHookOptions<\n    ChatAddedSubscription,\n    ChatAddedSubscriptionVariables\n  >\n) {\n  return ReactApolloHooks.useSubscription<\n    ChatAddedSubscription,\n    ChatAddedSubscriptionVariables\n  >(ChatAddedDocument, baseOptions);\n}\nexport type ChatAddedSubscriptionHookResult = ReturnType<\n  typeof useChatAddedSubscription\n>;\nexport const ChatRemovedDocument = gql`\n  subscription ChatRemoved {\n    chatRemoved\n  }\n`;\n\nexport function useChatRemovedSubscription(\n  baseOptions?: ReactApolloHooks.SubscriptionHookOptions<\n    ChatRemovedSubscription,\n    ChatRemovedSubscriptionVariables\n  >\n) {\n  return ReactApolloHooks.useSubscription<\n    ChatRemovedSubscription,\n    ChatRemovedSubscriptionVariables\n  >(ChatRemovedDocument, baseOptions);\n}\nexport type ChatRemovedSubscriptionHookResult = ReturnType<\n  typeof useChatRemovedSubscription\n>;\nexport const MessageAddedDocument = gql`\n  subscription MessageAdded {\n    messageAdded {\n      ...Message\n    }\n  }\n  ${MessageFragmentDoc}\n`;\n\nexport function useMessageAddedSubscription(\n  baseOptions?: ReactApolloHooks.SubscriptionHookOptions<\n    MessageAddedSubscription,\n    MessageAddedSubscriptionVariables\n  >\n) {\n  return ReactApolloHooks.useSubscription<\n    MessageAddedSubscription,\n    MessageAddedSubscriptionVariables\n  >(MessageAddedDocument, baseOptions);\n}\nexport type MessageAddedSubscriptionHookResult = ReturnType<\n  typeof useMessageAddedSubscription\n>;\nexport const SignInDocument = gql`\n  mutation signIn($username: String!, $password: String!) {\n    signIn(username: $username, password: $password) {\n      id\n    }\n  }\n`;\nexport type SignInMutationFn = ReactApollo.MutationFn<\n  SignInMutation,\n  SignInMutationVariables\n>;\n\nexport function useSignInMutation(\n  baseOptions?: ReactApolloHooks.MutationHookOptions<\n    SignInMutation,\n    SignInMutationVariables\n  >\n) {\n  return ReactApolloHooks.useMutation<SignInMutation, SignInMutationVariables>(\n    SignInDocument,\n    baseOptions\n  );\n}\nexport type SignInMutationHookResult = ReturnType<typeof useSignInMutation>;\nexport const SignUpDocument = gql`\n  mutation signUp(\n    $name: String!\n    $username: String!\n    $password: String!\n    $passwordConfirm: String!\n  ) {\n    signUp(\n      name: $name\n      username: $username\n      password: $password\n      passwordConfirm: $passwordConfirm\n    ) {\n      id\n    }\n  }\n`;\nexport type SignUpMutationFn = ReactApollo.MutationFn<\n  SignUpMutation,\n  SignUpMutationVariables\n>;\n\nexport function useSignUpMutation(\n  baseOptions?: ReactApolloHooks.MutationHookOptions<\n    SignUpMutation,\n    SignUpMutationVariables\n  >\n) {\n  return ReactApolloHooks.useMutation<SignUpMutation, SignUpMutationVariables>(\n    SignUpDocument,\n    baseOptions\n  );\n}\nexport type SignUpMutationHookResult = ReturnType<typeof useSignUpMutation>;\n","import gql from 'graphql-tag';\n\nexport default gql`\n  fragment Message on Message {\n    id\n    createdAt\n    content\n    isMine\n    chat {\n      id\n    }\n  }\n`;\n","import gql from 'graphql-tag';\nimport message from './message.fragment';\n\nexport default gql`\n  fragment Chat on Chat {\n    id\n    name\n    picture\n    lastMessage {\n      ...Message\n    }\n  }\n  ${message}\n`;\n","import gql from 'graphql-tag';\nimport message from './message.fragment';\n\nexport default gql`\n  fragment MessagesResult on MessagesResult {\n    cursor\n    hasMore\n    messages {\n      ...Message\n    }\n  }\n  ${message}\n`;\n","import gql from 'graphql-tag';\nimport chat from './chat.fragment';\nimport messagesResult from './messagesResult.fragment';\n\nexport default gql`\n  fragment FullChat on Chat {\n    ...Chat\n    messages(limit: $limit, after: $after) @connection(key: \"messages\") {\n      ...MessagesResult\n    }\n  }\n  ${chat}\n  ${messagesResult}\n`;\n","import gql from 'graphql-tag';\n\nexport default gql`\n  fragment User on User {\n    id\n    name\n    picture\n  }\n`;\n","import gql from 'graphql-tag';\nimport * as fragments from '../fragments';\n\nexport default gql`\n  query Chats {\n    chats {\n      ...Chat\n    }\n  }\n  ${fragments.chat}\n`;\n","import { DataProxy } from 'apollo-cache';\nimport { defaultDataIdFromObject } from 'apollo-cache-inmemory';\nimport { ApolloClient } from 'apollo-client';\nimport * as fragments from '../graphql/fragments';\nimport * as queries from '../graphql/queries';\nimport {\n  MessageFragment,\n  ChatFragment,\n  useMessageAddedSubscription,\n  useChatAddedSubscription,\n  useChatRemovedSubscription,\n} from '../graphql/types';\n\ntype Client = ApolloClient<any> | DataProxy;\n\nexport const useCacheService = () => {\n  useMessageAddedSubscription({\n    onSubscriptionData: ({ client, subscriptionData: { data } }) => {\n      if (data) {\n        writeMessage(client, data.messageAdded);\n      }\n    },\n  });\n\n  useChatAddedSubscription({\n    onSubscriptionData: ({ client, subscriptionData: { data } }) => {\n      if (data) {\n        writeChat(client, data.chatAdded);\n      }\n    },\n  });\n\n  useChatRemovedSubscription({\n    onSubscriptionData: ({ client, subscriptionData: { data } }) => {\n      if (data) {\n        eraseChat(client, data.chatRemoved);\n      }\n    },\n  });\n};\n\nexport const writeMessage = (client: Client, message: MessageFragment) => {\n  type FullChat = { [key: string]: any };\n  let fullChat;\n\n  const chatIdFromStore = defaultDataIdFromObject(message.chat);\n\n  if (chatIdFromStore === null) {\n    return;\n  }\n  try {\n    fullChat = client.readFragment<FullChat>({\n      id: chatIdFromStore,\n      fragment: fragments.fullChat,\n      fragmentName: 'FullChat',\n    });\n  } catch (e) {\n    return;\n  }\n\n  if (fullChat === null || fullChat.messages === null) {\n    return;\n  }\n  if (fullChat.messages.messages.some((m: any) => m.id === message.id)) return;\n\n  fullChat.messages.messages.push(message);\n  fullChat.lastMessage = message;\n\n  client.writeFragment({\n    id: chatIdFromStore,\n    fragment: fragments.fullChat,\n    fragmentName: 'FullChat',\n    data: fullChat,\n  });\n\n  let data;\n  try {\n    data = client.readQuery({\n      query: queries.chats,\n    });\n  } catch (e) {\n    return;\n  }\n\n  if (!data || data === null) {\n    return null;\n  }\n  if (!data.chats || data.chats === undefined) {\n    return null;\n  }\n  const chats = data.chats;\n\n  const chatIndex = chats.findIndex((c: any) => {\n    if (message === null || message.chat === null) return -1;\n    return c.id === message.chat.id;\n  });\n  if (chatIndex === -1) return;\n  const chatWhereAdded = chats[chatIndex];\n\n  // The chat will appear at the top of the ChatsList component\n  chats.splice(chatIndex, 1);\n  chats.unshift(chatWhereAdded);\n\n  client.writeQuery({\n    query: queries.chats,\n    data: { chats: chats },\n  });\n};\n\nexport const writeChat = (client: Client, chat: ChatFragment) => {\n  const chatId = defaultDataIdFromObject(chat);\n  if (chatId === null) {\n    return;\n  }\n\n  client.writeFragment({\n    id: chatId,\n    fragment: fragments.chat,\n    fragmentName: 'Chat',\n    data: chat,\n  });\n\n  let data;\n  try {\n    data = client.readQuery({\n      query: queries.chats,\n    });\n  } catch (e) {\n    return;\n  }\n\n  if (!data) return;\n\n  const chats = data.chats;\n\n  if (!chats) return;\n  if (chats.some((c: any) => c.id === chat.id)) return;\n\n  chats.unshift(chat);\n\n  client.writeQuery({\n    query: queries.chats,\n    data: { chats },\n  });\n};\n\nexport const eraseChat = (client: Client, chatId: string) => {\n  const chatType = {\n    __typename: 'Chat',\n    id: chatId,\n  };\n\n  const chatIdFromObject = defaultDataIdFromObject(chatType);\n  if (chatIdFromObject === null) {\n    return;\n  }\n\n  client.writeFragment({\n    id: chatIdFromObject,\n    fragment: fragments.fullChat,\n    fragmentName: 'FullChat',\n    data: null,\n  });\n\n  let data;\n  try {\n    data = client.readQuery({\n      query: queries.chats,\n    });\n  } catch (e) {\n    return;\n  }\n\n  if (!data || !data.chats) return;\n\n  const chats = data.chats;\n\n  if (!chats) return;\n\n  const chatIndex = chats.findIndex((c: any) => c.id === chatId);\n\n  if (chatIndex === -1) return;\n\n  // The chat will appear at the top of the ChatsList component\n  chats.splice(chatIndex, 1);\n\n  client.writeQuery({\n    query: queries.chats,\n    data: { chats: chats },\n  });\n};\n","import React from 'react';\nimport { useContext, useCallback } from 'react';\nimport { useApolloClient } from 'react-apollo-hooks';\nimport { Redirect } from 'react-router-dom';\nimport { useMeQuery, User, useSignInMutation, useSignUpMutation } from '../graphql/types';\nimport { useCacheService } from './cache.service';\n\nconst MyContext = React.createContext<User | null>(null);\n\nexport const useMe = () => {\n  return useContext(MyContext);\n};\n\nexport const withAuth = <P extends object>(\n  Component: React.ComponentType<P>\n) => {\n  return (props: any) => {\n    if (!isSignedIn()) {\n      if (props.history.location.pathname === '/sign-in') {\n        return null;\n      }\n\n      return <Redirect to=\"/sign-in\" />;\n    }\n\n    const signOut = useSignOut();\n    const { data, error, loading } = useMeQuery();\n\n    useCacheService();\n\n    if (loading) return null;\n\n    if (data === undefined) return null;\n\n    if (error || !data.me) {\n      signOut();\n\n      return <Redirect to=\"/sign-in\" />;\n    }\n\n    return (\n      <MyContext.Provider value={data.me}>\n        <Component {...props as P} />\n      </MyContext.Provider>\n    );\n  };\n};\n\nexport const useSignIn = useSignInMutation;\nexport const useSignUp = useSignUpMutation;\n\nexport const useSignOut = () => {\n  const client = useApolloClient()\n\n  return useCallback(() => {\n    // \"expires\" represents the lifespan of a cookie. Beyond that date the cookie will\n    // be deleted by the browser. \"expires\" cannot be viewed from \"document.cookie\"\n    document.cookie = `authToken=;expires=${new Date(0)}`;\n\n    // Clear cache\n    return client.clearStore();\n  }, [client])\n};\n\nexport const isSignedIn = () => {\n  return /authToken=.+(;|$)/.test(document.cookie);\n};\n","import MaterialButton from '@material-ui/core/Button';\nimport MaterialTextField from '@material-ui/core/TextField';\nimport styled from 'styled-components';\n\nexport const SignForm = styled.div`\n  height: calc(100% - 265px);\n`;\n\nexport const ActualForm = styled.form`\n  padding: 20px;\n`;\n\nexport const Section = styled.div`\n  padding-bottom: 35px;\n`;\n\nexport const Legend = styled.legend`\n  font-weight: bold;\n  color: white;\n`;\n\nexport const Label = styled.label`\n  color: white !important;\n`;\n\nexport const Input = styled.input`\n  color: white;\n\n  &::placeholder {\n    color: var(--primary-bg);\n  }\n`;\n\nexport const TextField = styled(MaterialTextField)`\n  width: 100%;\n  position: relative;\n\n  > div::before {\n    border-color: white !important;\n  }\n\n  input {\n    color: white !important;\n\n    &::placeholder {\n      color: var(--primary-bg) !important;\n    }\n  }\n\n  label {\n    color: white !important;\n  }\n`;\n\nexport const Button = styled(MaterialButton)`\n  width: 100px;\n  display: block !important;\n  margin: auto !important;\n  background-color: var(--secondary-bg) !important;\n\n  &[disabled] {\n    color: #38a81c;\n  }\n\n  &:not([disabled]) {\n    color: white;\n  }\n`;\n\nexport const ErrorMessage = styled.div`\n  position: fixed;\n  color: red;\n  font-size: 15px;\n  margin-top: 20px;\n`;\n","import React from 'react';\nimport { useCallback, useState } from 'react';\nimport { useSignIn } from '../../services/auth.service';\nimport {\n  SignForm,\n  ActualForm,\n  Legend,\n  Section,\n  TextField,\n  Button,\n  ErrorMessage,\n} from './form-components';\nimport { RouteComponentProps } from 'react-router-dom';\n\nconst SignInForm: React.FC<RouteComponentProps<any>> = ({ history }) => {\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n  const [error, setError] = useState('');\n  const [signIn] = useSignIn();\n\n  const onUsernameChange = useCallback(({ target }) => {\n    setError('');\n    setUsername(target.value);\n  }, []);\n\n  const onPasswordChange = useCallback(({ target }) => {\n    setError('');\n    setPassword(target.value);\n  }, []);\n\n  const maySignIn = useCallback(() => {\n    return !!(username && password);\n  }, [username, password]);\n\n  const handleSignIn = useCallback(() => {\n    signIn({ variables: { username, password } })\n      .then(() => {\n        history.replace('/chats');\n      })\n      .catch(error => {\n        setError(error.message || error);\n      });\n  }, [username, password, history, signIn]);\n\n  return (\n    <SignForm>\n      <ActualForm>\n        <Legend>Sign in</Legend>\n        <Section style={{ width: '100%' }}>\n          <TextField\n            data-testid=\"username-input\"\n            label=\"Username\"\n            value={username}\n            onChange={onUsernameChange}\n            margin=\"normal\"\n            placeholder=\"Enter your username\"\n          />\n          <TextField\n            data-testid=\"password-input\"\n            label=\"Password\"\n            type=\"password\"\n            value={password}\n            onChange={onPasswordChange}\n            margin=\"normal\"\n            placeholder=\"Enter your password\"\n          />\n        </Section>\n        <Button\n          data-testid=\"sign-in-button\"\n          type=\"button\"\n          color=\"secondary\"\n          variant=\"contained\"\n          disabled={!maySignIn()}\n          onClick={handleSignIn}>\n          Sign in\n        </Button>\n        <ErrorMessage data-testid=\"error-message\">{error}</ErrorMessage>\n      </ActualForm>\n    </SignForm>\n  );\n};\n\nexport default SignInForm;\n","import React from 'react';\nimport { useCallback, useState } from 'react';\nimport { useSignUp } from '../../services/auth.service';\nimport {\n  SignForm,\n  ActualForm,\n  Legend,\n  Section,\n  TextField,\n  Button,\n  ErrorMessage,\n} from './form-components';\nimport { RouteComponentProps } from 'react-router-dom';\n\nconst SignUpForm: React.FC<RouteComponentProps<any>> = ({ history }) => {\n  const [name, setName] = useState('');\n  const [username, setUsername] = useState('');\n  const [password, setPassword] = useState('');\n  const [passwordConfirm, setPasswordConfirm] = useState('');\n  const [error, setError] = useState('');\n  const [signUp] = useSignUp()\n\n  const updateName = useCallback(({ target }) => {\n    setError('');\n    setName(target.value);\n  }, []);\n\n  const updateUsername = useCallback(({ target }) => {\n    setError('');\n    setUsername(target.value);\n  }, []);\n\n  const updatePassword = useCallback(({ target }) => {\n    setError('');\n    setPassword(target.value);\n  }, []);\n\n  const updatePasswordConfirm = useCallback(({ target }) => {\n    setError('');\n    setPasswordConfirm(target.value);\n  }, []);\n\n  const maySignUp = useCallback(() => {\n    return !!(name && username && password && password === passwordConfirm);\n  }, [name, username, password, passwordConfirm]);\n\n  const handleSignUp = useCallback(() => {\n    signUp({ variables: { username, password, passwordConfirm, name } })\n      .then(() => {\n        history.replace('/sign-in');\n      })\n      .catch(error => {\n        setError(error.message || error);\n      });\n  }, [name, username, password, passwordConfirm, history, signUp]);\n\n  return (\n    <SignForm>\n      <ActualForm>\n        <Legend>Sign up</Legend>\n        <Section\n          style={{\n            float: 'left',\n            width: 'calc(50% - 10px)',\n            paddingRight: '10px',\n          }}>\n          <TextField\n            data-testid=\"name-input\"\n            label=\"Name\"\n            value={name}\n            onChange={updateName}\n            autoComplete=\"off\"\n            margin=\"normal\"\n          />\n          <TextField\n            data-testid=\"username-input\"\n            label=\"Username\"\n            value={username}\n            onChange={updateUsername}\n            autoComplete=\"off\"\n            margin=\"normal\"\n          />\n        </Section>\n        <Section\n          style={{\n            float: 'right',\n            width: 'calc(50% - 10px)',\n            paddingLeft: '10px',\n          }}>\n          <TextField\n            data-testid=\"password-input\"\n            label=\"Password\"\n            type=\"password\"\n            value={password}\n            onChange={updatePassword}\n            autoComplete=\"off\"\n            margin=\"normal\"\n          />\n          <TextField\n            data-testid=\"password-confirm-input\"\n            label=\"Confirm password\"\n            type=\"password\"\n            value={passwordConfirm}\n            onChange={updatePasswordConfirm}\n            autoComplete=\"off\"\n            margin=\"normal\"\n          />\n        </Section>\n        <Button\n          data-testid=\"sign-up-button\"\n          type=\"button\"\n          color=\"secondary\"\n          variant=\"contained\"\n          disabled={!maySignUp()}\n          onClick={handleSignUp}>\n          Sign up\n        </Button>\n        <ErrorMessage data-testid=\"error-message\">{error}</ErrorMessage>\n      </ActualForm>\n    </SignForm>\n  );\n};\n\nexport default SignUpForm;\n","import React from 'react';\nimport { useMemo } from 'react';\nimport { Route } from 'react-router-dom';\nimport styled from 'styled-components';\nimport AnimatedSwitch from '../AnimatedSwitch';\nimport SignInForm from './SignInForm';\nimport SignUpForm from './SignUpForm';\nimport { RouteComponentProps } from 'react-router-dom';\n\nconst Container = styled.div`\n  background: radial-gradient(rgb(34, 65, 67), rgb(17, 48, 50)),\n    url(/assets/chat-background.jpg) no-repeat;\n  background-size: cover;\n  background-blend-mode: multiply;\n  color: white;\n`;\n\nconst Intro = styled.div`\n  height: 265px;\n`;\n\nconst Icon = styled.img`\n  width: 125px;\n  height: auto;\n  margin-left: auto;\n  margin-right: auto;\n  padding-top: 70px;\n  display: block;\n`;\n\nconst Title = styled.h2`\n  width: 100%;\n  text-align: center;\n  color: white;\n`;\n\n// eslint-disable-next-line\nconst Alternative = styled.div`\n  position: fixed;\n  bottom: 10px;\n  left: 10px;\n\n  label {\n    color: var(--secondary-bg);\n  }\n`;\n\nconst AuthScreen: React.FC<RouteComponentProps<any>> = ({\n  history,\n  location,\n}) => {\n  const alternative = useMemo(() => {\n    if (location.pathname === '/sign-in') {\n      const handleSignUp = () => {\n        history.replace('/sign-up');\n      };\n\n      return (\n        <Alternative>\n          Don't have an account yet?{' '}\n          <label onClick={handleSignUp}>Sign up!</label>\n        </Alternative>\n      );\n    } else {\n      const handleSignIn = () => {\n        history.replace('/sign-in');\n      };\n\n      return (\n        <Alternative>\n          Already have an accout? <label onClick={handleSignIn}>Sign in!</label>\n        </Alternative>\n      );\n    }\n  }, [location.pathname, history]);\n\n  return (\n    <Container className=\"AuthScreen Screen\">\n      <Intro className=\"AuthScreen-intro\">\n        <Icon src=\"assets/whatsapp-icon.png\" className=\"AuthScreen-icon\" />\n        <Title className=\"AuthScreen-title\">WhatsApp</Title>\n      </Intro>\n      <AnimatedSwitch>\n        <Route exact path=\"/sign-in\" component={SignInForm} />\n        <Route exact path=\"/sign-up\" component={SignUpForm} />\n      </AnimatedSwitch>\n      {alternative}\n    </Container>\n  );\n};\n\nexport default AuthScreen;\n","import Button from '@material-ui/core/Button';\nimport Toolbar from '@material-ui/core/Toolbar';\nimport ArrowBackIcon from '@material-ui/icons/ArrowBack';\nimport DeleteIcon from '@material-ui/icons/Delete';\nimport gql from 'graphql-tag';\nimport React from 'react';\nimport { useCallback } from 'react';\nimport styled from 'styled-components';\nimport { History } from 'history';\nimport { useRemoveChatMutation } from '../../graphql/types';\nimport { eraseChat } from '../../services/cache.service';\n\nconst Container = styled(Toolbar)`\n  padding: 0;\n  display: flex;\n  flex-direction: row;\n  background-color: var(--primary-bg);\n  color: var(--primary-text);\n`;\n\nconst BackButton = styled(Button)`\n  svg {\n    color: var(--primary-text);\n  }\n`;\n\nconst Rest = styled.div`\n  flex: 1;\n  display: flex;\n  justify-content: flex-end;\n`;\n\nconst Picture = styled.img`\n  height: 40px;\n  width: 40px;\n  margin-top: 3px;\n  margin-left: -22px;\n  object-fit: cover;\n  padding: 5px;\n  border-radius: 50%;\n`;\n\nconst Name = styled.div`\n  line-height: 56px;\n`;\n\nconst DeleteButton = styled(Button)`\n  color: var(--primary-text) !important;\n`;\n\nexport const removeChatMutation = gql`\n  mutation RemoveChat($chatId: ID!) {\n    removeChat(chatId: $chatId)\n  }\n`;\n\ninterface ChatNavbarProps {\n  history: History;\n  chat: {\n    picture?: string | null;\n    name?: string | null;\n    id: string;\n  };\n}\n\nconst ChatNavbar: React.FC<ChatNavbarProps> = ({ chat, history }) => {\n  const [removeChat] = useRemoveChatMutation({\n    variables: {\n      chatId: chat.id,\n    },\n    update: (client, { data: { removeChat } }: any) => {\n      eraseChat(client, removeChat);\n    },\n  });\n\n  const handleRemoveChat = useCallback(() => {\n    removeChat().then(() => {\n      history.replace('/chats');\n    });\n  }, [removeChat, history]);\n\n  const navBack = useCallback(() => {\n    history.replace('/chats');\n  }, [history]);\n\n  return (\n    <Container>\n      <BackButton data-testid=\"back-button\" onClick={navBack}>\n        <ArrowBackIcon />\n      </BackButton>\n      {chat && chat.picture && chat.name && (\n        <React.Fragment>\n          <Picture data-testid=\"chat-picture\" src={chat.picture} />\n          <Name data-testid=\"chat-name\">{chat.name}</Name>\n        </React.Fragment>\n      )}\n      <Rest>\n        <DeleteButton data-testid=\"delete-button\" onClick={handleRemoveChat}>\n          <DeleteIcon />\n        </DeleteButton>\n      </Rest>\n    </Container>\n  );\n};\n\nexport default ChatNavbar;\n","import Button from '@material-ui/core/Button';\nimport SendIcon from '@material-ui/icons/Send';\nimport React from 'react';\nimport styled from 'styled-components';\nimport { useState } from 'react';\n\nconst Container = styled.div`\n  display: flex;\n  height: 50px;\n  padding: 5px;\n  width: calc(100% - 10px);\n`;\n\nconst ActualInput = styled.input`\n  width: calc(100% - 50px);\n  border: none;\n  border-radius: 999px;\n  padding: 10px;\n  padding-left: 20px;\n  padding-right: 20px;\n  font-size: 15px;\n  outline: none;\n  box-shadow: 0 1px silver;\n  font-size: 18px;\n  line-height: 45px;\n`;\n\nconst SendButton = styled(Button)`\n  min-width: 50px !important;\n  width: 50px !important;\n  border-radius: 999px !important;\n  background-color: var(--primary-bg) !important;\n  margin: 0 5px !important;\n  margin-right: 0 !important;\n  color: white !important;\n  padding-left: 20px !important;\n\n  svg {\n    margin-left: -3px;\n  }\n`;\n\ninterface MessageInputProps {\n  onSendMessage(content: string): any;\n}\n\nconst MessageInput: React.FC<MessageInputProps> = ({ onSendMessage }) => {\n  const [message, setMessage] = useState('');\n\n  const onKeyPress = (e: any) => {\n    if (e.charCode === 13) {\n      submitMessage();\n    }\n  };\n\n  const onChange = ({ target }: any) => {\n    setMessage(target.value);\n  };\n\n  const submitMessage = () => {\n    if (!message) return;\n\n    setMessage('');\n\n    if (typeof onSendMessage === 'function') {\n      onSendMessage(message);\n    }\n  };\n\n  return (\n    <Container>\n      <ActualInput\n        data-testid=\"message-input\"\n        type=\"text\"\n        placeholder=\"Type a message\"\n        value={message}\n        onKeyPress={onKeyPress}\n        onChange={onChange}\n      />\n      <SendButton\n        data-testid=\"send-button\"\n        variant=\"contained\"\n        color=\"primary\"\n        onClick={submitMessage}>\n        <SendIcon />\n      </SendButton>\n    </Container>\n  );\n};\n\nexport default MessageInput;\n","import { useState, useEffect, useCallback, RefObject } from 'react';\n\nexport const useInfiniteScroll = ({\n  ref,\n  hasMore,\n  onLoadMore,\n}: {\n  onLoadMore: Function;\n  hasMore: boolean;\n  ref: RefObject<HTMLElement>;\n}): [boolean, () => void] => {\n  const [isFetching, setIsFetching] = useState(false);\n  const handleScroll = useCallback(() => {\n    if (ref.current!.scrollTop === 0 && isFetching === false && hasMore) {\n      // starts to fetch if scrolled to top, fetching is not in progress and has more data\n      setIsFetching(true);\n    }\n  }, [ref, isFetching, hasMore]);\n\n  useEffect(() => {\n    const elem = ref.current;\n\n    if (!elem) {\n      return;\n    }\n\n    elem.addEventListener('scroll', handleScroll);\n\n    return () => {\n      elem!.removeEventListener('scroll', handleScroll);\n    };\n  }, [ref, handleScroll]);\n\n  // loads more if fetching has started\n  useEffect(() => {\n    if (isFetching) {\n      onLoadMore();\n    }\n  }, [isFetching, onLoadMore]);\n\n  const stopFetching = useCallback(() => {\n    setIsFetching(false);\n  }, []);\n\n  return [isFetching, stopFetching];\n};\n\nexport default useInfiniteScroll;\n","import format from 'date-fns/format';\nimport React from 'react';\nimport { useEffect, useRef } from 'react';\nimport styled, { css } from 'styled-components';\nimport { useInfiniteScroll } from '../../hooks/use-infinite-scroll';\nimport { useAdjustedScroll } from '../../hooks/use-adjusted-scroll';\n\nconst Container = styled.div`\n  position: relative;\n  display: block;\n  flex: 2;\n  overflow-y: overlay;\n  padding: 0 15px;\n`;\n\nconst LoadingMore = styled.div`\n  height: 30px;\n  line-height: 30px;\n  position: absolute;\n  top: 0;\n  right: 0;\n  bottom: 0;\n  left: 0;\n  text-align: center;\n`;\n\ntype StyledProp = {\n  isMine: any;\n};\n\nconst MessageItem = styled.div`\n  display: inline-block;\n  position: relative;\n  max-width: 100%;\n  border-radius: 7px;\n  box-shadow: 0 1px 2px rgba(0, 0, 0, 0.15);\n  margin-top: 10px;\n  margin-bottom: 10px;\n  clear: both;\n\n  &::after {\n    content: '';\n    display: table;\n    clear: both;\n  }\n\n  &::before {\n    content: '';\n    position: absolute;\n    bottom: 3px;\n    width: 12px;\n    height: 19px;\n    background-position: 50% 50%;\n    background-repeat: no-repeat;\n    background-size: contain;\n  }\n\n  ${(props: StyledProp) =>\n    props.isMine\n      ? css`\n          float: right;\n          background-color: #dcf8c6;\n\n          &::before {\n            right: -11px;\n            background-image: url(/assets/message-mine.png);\n          }\n        `\n      : css`\n          float: left;\n          background-color: #fff;\n\n          &::before {\n            left: -11px;\n            background-image: url(/assets/message-other.png);\n          }\n        `}\n`;\n\nconst Contents = styled.div`\n  padding: 5px 7px;\n  word-wrap: break-word;\n\n  &::after {\n    content: ' \\\\00a0\\\\00a0\\\\00a0\\\\00a0\\\\00a0\\\\00a0\\\\00a0\\\\00a0\\\\00a0\\\\00a0\\\\00a0\\\\00a0\\\\00a0\\\\00a0\\\\00a0\\\\00a0\\\\00a0\\\\00a0\\\\00a0';\n    display: inline;\n  }\n`;\n\nconst Timestamp = styled.div`\n  position: absolute;\n  bottom: 2px;\n  right: 7px;\n  color: gray;\n  font-size: 12px;\n`;\n\ninterface Message {\n  id: string | null;\n  content: string | null;\n  createdAt: string | null;\n}\ninterface MessagesListProps {\n  messages: Array<Message>;\n  loadMore: Function;\n  hasMore: boolean;\n}\n\nconst MessagesList: React.FC<MessagesListProps> = ({\n  messages,\n  loadMore,\n  hasMore,\n}) => {\n  const selfRef = useRef<HTMLDivElement>(null);\n  const [fetching, stopFetching] = useInfiniteScroll({\n    onLoadMore: loadMore,\n    hasMore,\n    ref: selfRef!,\n  });\n  const adjustScroll = useAdjustedScroll(selfRef);\n\n  useEffect(() => {\n    if (!selfRef.current) return;\n\n    if (fetching) {\n      stopFetching();\n      adjustScroll();\n    } else {\n      // scroll to the most recent message\n      adjustScroll(true);\n    }\n  }, [messages.length, selfRef, fetching, stopFetching, adjustScroll]);\n\n  return (\n    <Container ref={selfRef}>\n      {fetching && <LoadingMore>{'Loading more messages...'}</LoadingMore>}\n      {messages.map((message: any) => (\n        <MessageItem\n          data-testid=\"message-item\"\n          isMine={message.isMine}\n          key={message.id}>\n          <Contents data-testid=\"message-content\">{message.content}</Contents>\n          <Timestamp data-testid=\"message-date\">\n            {format(message.createdAt, 'HH:mm')}\n          </Timestamp>\n        </MessageItem>\n      ))}\n    </Container>\n  );\n};\n\nexport default MessagesList;\n","import { useState, useCallback, RefObject } from 'react';\nimport * as ReactDOM from 'react-dom';\n\nexport const useAdjustedScroll = (ref: RefObject<HTMLElement>) => {\n  const [previousScroll, setPreviousScroll] = useState<{\n    top: number;\n    height: number;\n  }>();\n\n  /**\n   * Scrolls to the previous position or completely to bottom (on demand)\n   */\n  const adjust = useCallback(\n    (scrollToBottom?: boolean) => {\n      if (!ref.current) return;\n\n      const node = ReactDOM.findDOMNode(ref.current) as HTMLElement;\n      const height =\n        !scrollToBottom && previousScroll\n          ? previousScroll.height\n          : node.clientHeight;\n\n      node.scrollTop = node.scrollHeight - height;\n\n      // saves current scroll details\n      setPreviousScroll({\n        top: node.scrollTop,\n        height: node.scrollHeight,\n      });\n    },\n    [ref, previousScroll]\n  );\n\n  return adjust;\n};\n","import gql from 'graphql-tag';\nimport React from 'react';\nimport { useCallback, useState, useContext, useEffect } from 'react';\nimport { Redirect } from 'react-router-dom';\nimport { useApolloClient } from 'react-apollo-hooks';\nimport styled from 'styled-components';\nimport ChatNavbar from './ChatNavbar';\nimport MessageInput from './MessageInput';\nimport MessagesList from './MessagesList';\nimport { History } from 'history';\nimport {\n  useGetChatQuery,\n  useAddMessageMutation,\n  GetChatQuery,\n  GetChatQueryVariables,\n  GetChatDocument,\n} from '../../graphql/types';\nimport * as fragments from '../../graphql/fragments';\nimport { writeMessage } from '../../services/cache.service';\n\nconst Container = styled.div`\n  background: url(/assets/chat-background.jpg);\n  display: flex;\n  flex-flow: column;\n  height: 100vh;\n`;\n\n// eslint-disable-next-line\nconst getChatQuery = gql`\n  query GetChat($chatId: ID!, $limit: Int!, $after: Float) {\n    chat(chatId: $chatId) {\n      ...FullChat\n    }\n  }\n  ${fragments.fullChat}\n`;\n\n// eslint-disable-next-line\nconst addMessageMutation = gql`\n  mutation AddMessage($chatId: ID!, $content: String!) {\n    addMessage(chatId: $chatId, content: $content) {\n      ...Message\n    }\n  }\n  ${fragments.message}\n`;\n\nconst PaginationContext = React.createContext({\n  after: 0,\n  limit: 20,\n  /**\n   * Sets new cursor\n   */\n  setAfter: (after: number) => {},\n  /**\n   * Resets `after` value to its inital state (null) so\n   */\n  reset: () => {},\n});\n\nconst usePagination = () => {\n  const pagination = useContext(PaginationContext);\n\n  // Resets the pagination every time a component did unmount\n  useEffect(() => {\n    return () => {\n      pagination.reset();\n    };\n  }, [pagination]);\n\n  return pagination;\n};\n\nexport const ChatPaginationProvider = ({ children }: { children: any }) => {\n  const [after, setAfter] = useState<number | null>(null);\n\n  return (\n    <PaginationContext.Provider\n      value={{\n        limit: 20,\n        after: after!,\n        setAfter,\n        reset: () => setAfter(null),\n      }}>\n      {children}\n    </PaginationContext.Provider>\n  );\n};\n\nexport const useGetChatPrefetch = () => {\n  const client = useApolloClient();\n  const { limit, after } = usePagination();\n\n  return (chatId: string) => {\n    client.query<GetChatQuery, GetChatQueryVariables>({\n      query: GetChatDocument,\n      variables: {\n        chatId,\n        after,\n        limit,\n      },\n    });\n  };\n};\n\ninterface ChatRoomScreenParams {\n  chatId: string;\n  history: History;\n}\n\nconst ChatRoom: React.FC<ChatRoomScreenParams> = ({ history, chatId }) => {\n  const { after, limit, setAfter } = usePagination();\n  const { data, loading, fetchMore } = useGetChatQuery({\n    variables: { chatId, after, limit },\n  });\n\nconst [addMessage] = useAddMessageMutation();\n\n  const onSendMessage = useCallback(\n    (content: string) => {\n      if (data === undefined) {\n        return null;\n      }\n      const chat = data.chat;\n      if (chat === null) return null;\n\n      addMessage({\n        variables: { chatId, content },\n        optimisticResponse: {\n          __typename: 'Mutation',\n          addMessage: {\n            __typename: 'Message',\n            id: Math.random()\n              .toString(36)\n              .substr(2, 9),\n            createdAt: new Date(),\n            isMine: true,\n            chat: {\n              __typename: 'Chat',\n              id: chatId,\n            },\n            content,\n          },\n        },\n        update: (client, { data: { addMessage } }: any) => {\n          writeMessage(client, addMessage);\n        },\n      });\n    },\n    [data, chatId, addMessage]\n  );\n\n  useEffect(() => {\n    if (!after) {\n      return;\n    }\n\n    // every time after changes its value, fetch more messages\n    fetchMore({\n      variables: {\n        after,\n        limit,\n      },\n      updateQuery(prev, { fetchMoreResult }) {\n        const messages = [\n          ...fetchMoreResult!.chat!.messages.messages,\n          ...prev.chat!.messages.messages,\n        ];\n\n        return {\n          ...prev,\n          chat: {\n            ...prev.chat!,\n            messages: {\n              ...fetchMoreResult!.chat!.messages,\n              messages,\n            },\n          },\n        };\n      },\n    });\n  }, [after, limit, fetchMore]);\n\n  if (data === undefined) {\n    return null;\n  }\n  const chat = data.chat;\n  const loadingChat = loading;\n\n  if (loadingChat) return null;\n  if (chat === null) return null;\n\n  // Chat was probably removed from cache by the subscription handler\n  if (!chat) {\n    return <Redirect to=\"/chats\" />;\n  }\n\n  return (\n    <Container>\n      <ChatNavbar chat={chat} history={history} />\n      {chat.messages && (\n        <MessagesList\n          messages={chat.messages.messages}\n          hasMore={chat.messages.hasMore}\n          loadMore={() => setAfter(chat.messages.cursor!)}\n        />\n      )}\n      <MessageInput onSendMessage={onSendMessage} />\n    </Container>\n  );\n};\n\nconst ChatRoomScreen: React.FC<ChatRoomScreenParams> = ({\n  history,\n  chatId,\n}) => {\n  return (\n    <ChatPaginationProvider>\n      <ChatRoom history={history} chatId={chatId} />\n    </ChatPaginationProvider>\n  );\n};\n\nexport default ChatRoomScreen;\n","import React from 'react';\nimport { Button, Toolbar } from '@material-ui/core';\nimport styled from 'styled-components';\nimport SignOutIcon from '@material-ui/icons/PowerSettingsNew';\nimport { useCallback } from 'react';\nimport { useSignOut } from '../../services/auth.service';\nimport { History } from 'history';\n\nconst Container = styled(Toolbar)`\n  display: flex;\n  background-color: var(--primary-bg);\n  color: var(--primary-text);\n  font-size: 20px;\n  line-height: 40px;\n`;\n\nconst Title = styled.div`\n  flex: 1;\n`;\n\nconst LogoutButton = styled(Button)`\n  color: var(--primary-text) !important;\n`;\n\ninterface ChildComponentProps {\n  history: History;\n}\n\nconst ChatsNavbar: React.FC<ChildComponentProps> = ({ history }) => {\n  const signOut = useSignOut();\n\n  const handleSignOut = useCallback(() => {\n    signOut().then(() => {\n      history.replace('/sign-in');\n    });\n  }, [history, signOut]);\n\n  return (\n    <Container>\n      <Title>Whatsapp Clone</Title>\n      <LogoutButton data-testid=\"sign-out-button\" onClick={handleSignOut}>\n        <SignOutIcon />\n      </LogoutButton>\n    </Container>\n  );\n};\n\nexport default ChatsNavbar;\n","import React from 'react';\nimport format from 'date-fns/format';\nimport { List, ListItem } from '@material-ui/core';\nimport styled from 'styled-components';\nimport { useCallback } from 'react';\nimport { History } from 'history';\nimport { useChatsQuery } from '../../graphql/types';\nimport { useGetChatPrefetch } from '../ChatRoomScreen';\n\nconst Container = styled.div`\n  height: calc(100% - 56px);\n  overflow-y: overlay;\n`;\n\nconst StyledList = styled(List)`\n  padding: 0 !important;\n`;\n\nconst StyledListItem = styled(ListItem)`\n  height: 76px;\n  padding: 0 15px;\n  display: flex;\n`;\n\nconst ChatPicture = styled.img`\n  height: 50px;\n  width: 50px;\n  object-fit: cover;\n  border-radius: 50%;\n`;\n\nconst ChatInfo = styled.div`\n  width: calc(100% - 60px);\n  height: 46px;\n  padding: 15px 0;\n  margin-left: 10px;\n  border-bottom: 0.5px solid silver;\n  position: relative;\n`;\n\nconst ChatName = styled.div`\n  margin-top: 5px;\n`;\n\nconst MessageContent = styled.div`\n  color: gray;\n  font-size: 15px;\n  margin-top: 5px;\n  text-overflow: ellipsis;\n  overflow: hidden;\n  white-space: nowrap;\n`;\n\nconst MessageDate = styled.div`\n  position: absolute;\n  color: gray;\n  top: 20px;\n  right: 0;\n  font-size: 13px;\n`;\n\ninterface ChatsListProps {\n  history: History;\n}\n\nconst ChatsList: React.FC<ChatsListProps> = ({ history }) => {\n  const navToChat = useCallback(\n    chat => {\n      history.push(`chats/${chat.id}`);\n    },\n    [history]\n  );\n  const prefetchChat = useGetChatPrefetch();\n\n  const { data } = useChatsQuery();\n\n  if (data === undefined || data.chats === undefined) {\n    return null;\n  }\n  let chats = data.chats;\n\n  return (\n    <Container>\n      <StyledList>\n        {chats.map((chat: any) => (\n          <StyledListItem\n            key={chat.id}\n            data-testid=\"chat\"\n            button\n            onClick={navToChat.bind(null, chat)}\n            onMouseEnter={() => {\n              prefetchChat(chat.id);\n            }}>\n            <ChatPicture\n              data-testid=\"picture\"\n              src={chat.picture}\n              alt=\"Profile\"\n            />\n            <ChatInfo>\n              <ChatName data-testid=\"name\">{chat.name}</ChatName>\n              {chat.lastMessage && (\n                <React.Fragment>\n                  <MessageContent data-testid=\"content\">\n                    {chat.lastMessage.content}\n                  </MessageContent>\n                  <MessageDate data-testid=\"date\">\n                    {format(chat.lastMessage.createdAt, 'HH:mm')}\n                  </MessageDate>\n                </React.Fragment>\n              )}\n            </ChatInfo>\n          </StyledListItem>\n        ))}\n      </StyledList>\n    </Container>\n  );\n};\n\nexport default ChatsList;\n","import MaterialList from '@material-ui/core/List';\nimport MaterialItem from '@material-ui/core/ListItem';\nimport gql from 'graphql-tag';\nimport React from 'react';\nimport styled from 'styled-components';\nimport { useApolloClient } from 'react-apollo-hooks';\nimport { useUsersListQuery, User, UsersListDocument } from '../graphql/types';\nimport * as fragments from '../graphql/fragments';\n\nconst ActualList = styled(MaterialList)`\n  padding: 0;\n`;\n\nconst UserItem = styled(MaterialItem)`\n  position: relative;\n  padding: 7.5px 15px;\n  display: flex;\n  cursor: pinter;\n`;\n\nconst ProfilePicture = styled.img`\n  height: 50px;\n  width: 50px;\n  object-fit: cover;\n  border-radius: 50%;\n`;\n\nconst Name = styled.div`\n  padding-left: 15px;\n  font-weight: bold;\n`;\n\nexport const UsersListQuery = gql`\n  query UsersList {\n    users {\n      ...User\n    }\n  }\n  ${fragments.user}\n`;\n\nexport const useUsersPrefetch = () => {\n  const client = useApolloClient();\n\n  return () => {\n    client.query({\n      query: UsersListDocument,\n    });\n  };\n};\n\ninterface ChildComponentProps {\n  onUserPick: any;\n}\n\nconst UsersList: React.FC<ChildComponentProps> = ({\n  onUserPick = (user: User) => {},\n}) => {\n  const { data, loading: loadingUsers } = useUsersListQuery();\n\n  if (data === undefined) return null;\n  const users = data.users;\n\n  return (\n    <ActualList>\n      {!loadingUsers &&\n        users.map(user => (\n          <UserItem\n            key={user.id}\n            data-testid=\"user\"\n            onClick={onUserPick.bind(null, user)}\n            button>\n            {user !== null && user.picture !== null && (\n              <React.Fragment>\n                <ProfilePicture data-testid=\"picture\" src={user.picture} />\n                <Name data-testid=\"name\">{user.name}</Name>\n              </React.Fragment>\n            )}\n          </UserItem>\n        ))}\n    </ActualList>\n  );\n};\n\nexport default UsersList;\n","import Button from '@material-ui/core/Button';\nimport ChatIcon from '@material-ui/icons/Chat';\nimport React from 'react';\nimport styled from 'styled-components';\nimport { History } from 'history';\nimport { useUsersPrefetch } from '../UsersList';\n\nconst Container = styled.div`\n  position: fixed;\n  right: 10px;\n  bottom: 10px;\n\n  button {\n    min-width: 50px;\n    width: 50px;\n    height: 50px;\n    border-radius: 999px;\n    background-color: var(--secondary-bg);\n    color: white;\n  }\n`;\n\ninterface ChildComponentProps {\n  history: History;\n}\n\nconst AddChatButton: React.FC<ChildComponentProps> = ({ history }) => {\n  const prefetchUsers = useUsersPrefetch();\n  const onClick = () => {\n    history.push('/new-chat');\n  };\n\n  return (\n    <Container onMouseEnter={() => prefetchUsers()}>\n      <Button\n        data-testid=\"new-chat-button\"\n        variant=\"contained\"\n        color=\"secondary\"\n        onClick={onClick}>\n        <ChatIcon />\n      </Button>\n    </Container>\n  );\n};\n\nexport default AddChatButton;\n","import React from 'react';\nimport ChatsNavbar from './ChatsNavbar';\nimport ChatsList from './ChatsList';\nimport styled from 'styled-components';\nimport { History } from 'history';\nimport AddChatButton from './AddChatButton';\n\nconst Container = styled.div`\n  height: 100vh;\n`;\n\ninterface ChatsListScreenProps {\n  history: History;\n}\n\nconst ChatsListScreen: React.FC<ChatsListScreenProps> = ({ history }) => (\n  <Container>\n    <ChatsNavbar history={history} />\n    <ChatsList history={history} />\n    <AddChatButton history={history} />\n  </Container>\n);\n\nexport default ChatsListScreen;\n","import ArrowBackIcon from '@material-ui/icons/ArrowBack';\nimport { Toolbar, Button } from '@material-ui/core';\nimport React from 'react';\nimport { useCallback } from 'react';\nimport styled from 'styled-components';\nimport { History } from 'history';\n\nconst Container = styled(Toolbar)`\n  display: flex;\n  background-color: var(--primary-bg);\n  color: var(--primary-text);\n  font-size: 20px;\n  line-height: 40px;\n`;\n\nconst BackButton = styled(Button)`\n  svg {\n    color: var(--primary-text);\n  }\n`;\n\nconst Title = styled.div`\n  flex: 1;\n`;\n\ninterface ChildComponentProps {\n  history: History;\n}\n\nconst ChatCreationNavbar: React.FC<ChildComponentProps> = ({ history }) => {\n  const navBack = useCallback(() => {\n    history.replace('/chats');\n  }, [history]);\n\n  return (\n    <Container>\n      <BackButton data-testid=\"back-button\" onClick={navBack}>\n        <ArrowBackIcon />\n      </BackButton>\n      <Title>Create Chat</Title>\n    </Container>\n  );\n};\n\nexport default ChatCreationNavbar;\n","import gql from 'graphql-tag';\nimport React from 'react';\nimport { useCallback } from 'react';\nimport styled from 'styled-components';\nimport * as fragments from '../../graphql/fragments';\nimport UsersList from '../UsersList';\nimport ChatCreationNavbar from './ChatCreationNavbar';\nimport { History } from 'history';\nimport { useAddChatMutation } from '../../graphql/types';\nimport { writeChat } from '../../services/cache.service';\n\n// eslint-disable-next-line\nconst Container = styled.div`\n  height: calc(100% - 56px);\n  overflow-y: overlay;\n`;\n\n// eslint-disable-next-line\nconst StyledUsersList = styled(UsersList)`\n  height: calc(100% - 56px);\n`;\n\ngql`\n  mutation AddChat($recipientId: ID!) {\n    addChat(recipientId: $recipientId) {\n      ...Chat\n    }\n  }\n  ${fragments.chat}\n`;\n\ninterface ChildComponentProps {\n  history: History;\n}\n\nconst ChatCreationScreen: React.FC<ChildComponentProps> = ({ history }) => {\n  const [addChat] = useAddChatMutation({\n    update: (client, { data: { addChat } }: any) => {\n      writeChat(client, addChat);\n    },\n  });\n\n  const onUserPick = useCallback(\n    user => {\n      addChat({\n        optimisticResponse: {\n          __typename: 'Mutation',\n          addChat: {\n            __typename: 'Chat',\n            id: Math.random()\n              .toString(36)\n              .substr(2, 9),\n            name: user.name,\n            picture: user.picture,\n            lastMessage: null,\n          },\n        },\n        variables: {\n          recipientId: user.id,\n        },\n      }).then(({ data }: any) => {\n        if (data !== null) {\n          history.push(`/chats/${data.addChat.id}`);\n        }\n      });\n    },\n    [addChat, history]\n  );\n\n  return (\n    <div>\n      <ChatCreationNavbar history={history} />\n      <UsersList onUserPick={onUserPick} />\n    </div>\n  );\n};\n\nexport default ChatCreationScreen;\n","import React from 'react';\nimport {\n  BrowserRouter,\n  Route,\n  Redirect,\n  RouteComponentProps,\n} from 'react-router-dom';\nimport AuthScreen from './components/AuthScreen';\nimport ChatRoomScreen from './components/ChatRoomScreen';\nimport ChatsListScreen from './components/ChatsListScreen';\nimport ChatCreationScreen from './components/ChatCreationScreen';\nimport AnimatedSwitch from './components/AnimatedSwitch';\nimport { withAuth } from './services/auth.service';\n\nconst App: React.FC = () => (\n  <BrowserRouter>\n    <AnimatedSwitch>\n      <Route exact path=\"/sign-(in|up)\" component={AuthScreen} />\n      <Route exact path=\"/chats\" component={withAuth(ChatsListScreen)} />\n\n      <Route\n        exact\n        path=\"/chats/:chatId\"\n        component={withAuth(\n          ({ match, history }: RouteComponentProps<{ chatId: string }>) => (\n            <ChatRoomScreen chatId={match.params.chatId} history={history} />\n          )\n        )}\n      />\n\n      <Route exact path=\"/new-chat\" component={withAuth(ChatCreationScreen)} />\n    </AnimatedSwitch>\n    <Route exact path=\"/\" render={redirectToChats} />\n  </BrowserRouter>\n);\n\nconst redirectToChats = () => <Redirect to=\"/chats\" />;\n\nexport default App;\n","import { InMemoryCache } from 'apollo-cache-inmemory';\nimport { ApolloClient } from 'apollo-client';\nimport { getMainDefinition } from 'apollo-utilities';\nimport { HttpLink } from 'apollo-link-http';\nimport { WebSocketLink } from 'apollo-link-ws';\nimport { ApolloLink, split } from 'apollo-link';\n\nconst httpUri = process.env.REACT_APP_SERVER_URL + '/graphql';\nconst wsUri = httpUri.replace(/^https?/, 'ws');\n\nconst httpLink = new HttpLink({\n  uri: httpUri,\n  credentials: 'include',\n});\n\nconst wsLink = new WebSocketLink({\n  uri: wsUri,\n  options: {\n    // Automatic reconnect in case of connection error\n    reconnect: true,\n  },\n});\n\nconst terminatingLink = split(\n  ({ query }) => {\n    const { kind, operation }: any = getMainDefinition(query);\n    // If this is a subscription query, use wsLink, otherwise use httpLink\n    return kind === 'OperationDefinition' && operation === 'subscription';\n  },\n  wsLink,\n  httpLink\n);\n\nconst link = ApolloLink.from([terminatingLink]);\n\nconst inMemoryCache = new InMemoryCache();\n\nexport default new ApolloClient({\n  link,\n  cache: inMemoryCache,\n});\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import { MuiThemeProvider, createMuiTheme } from '@material-ui/core/styles';\nimport React from 'react';\nimport ReactDOM from 'react-dom';\nimport { ApolloProvider } from 'react-apollo-hooks';\nimport './index.css';\nimport App from './App';\nimport client from './client';\nimport * as serviceWorker from './serviceWorker';\n\nconst theme = createMuiTheme({\n  palette: {\n    primary: { main: '#2c6157' },\n    secondary: { main: '#6fd056' },\n  },\n});\n\nReactDOM.render(\n  <MuiThemeProvider theme={theme}>\n    <ApolloProvider client={client}>\n      <App />\n    </ApolloProvider>\n  </MuiThemeProvider>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}